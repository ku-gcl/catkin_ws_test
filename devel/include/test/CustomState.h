// Generated by gencpp from file test/CustomState.msg
// DO NOT EDIT!


#ifndef TEST_MESSAGE_CUSTOMSTATE_H
#define TEST_MESSAGE_CUSTOMSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test
{
template <class ContainerAllocator>
struct CustomState_
{
  typedef CustomState_<ContainerAllocator> Type;

  CustomState_()
    : theta1(0.0)
    , theta1_dot(0.0)
    , theta2(0.0)
    , theta2_dot(0.0)  {
    }
  CustomState_(const ContainerAllocator& _alloc)
    : theta1(0.0)
    , theta1_dot(0.0)
    , theta2(0.0)
    , theta2_dot(0.0)  {
  (void)_alloc;
    }



   typedef double _theta1_type;
  _theta1_type theta1;

   typedef double _theta1_dot_type;
  _theta1_dot_type theta1_dot;

   typedef double _theta2_type;
  _theta2_type theta2;

   typedef double _theta2_dot_type;
  _theta2_dot_type theta2_dot;





  typedef boost::shared_ptr< ::test::CustomState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test::CustomState_<ContainerAllocator> const> ConstPtr;

}; // struct CustomState_

typedef ::test::CustomState_<std::allocator<void> > CustomState;

typedef boost::shared_ptr< ::test::CustomState > CustomStatePtr;
typedef boost::shared_ptr< ::test::CustomState const> CustomStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test::CustomState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test::CustomState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test::CustomState_<ContainerAllocator1> & lhs, const ::test::CustomState_<ContainerAllocator2> & rhs)
{
  return lhs.theta1 == rhs.theta1 &&
    lhs.theta1_dot == rhs.theta1_dot &&
    lhs.theta2 == rhs.theta2 &&
    lhs.theta2_dot == rhs.theta2_dot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test::CustomState_<ContainerAllocator1> & lhs, const ::test::CustomState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::test::CustomState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test::CustomState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test::CustomState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test::CustomState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test::CustomState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test::CustomState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test::CustomState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8d2dcedf46285bfb75a4965f00f0338";
  }

  static const char* value(const ::test::CustomState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8d2dcedf46285bfULL;
  static const uint64_t static_value2 = 0xb75a4965f00f0338ULL;
};

template<class ContainerAllocator>
struct DataType< ::test::CustomState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test/CustomState";
  }

  static const char* value(const ::test::CustomState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test::CustomState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 theta1\n"
"float64 theta1_dot\n"
"float64 theta2\n"
"float64 theta2_dot\n"
;
  }

  static const char* value(const ::test::CustomState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test::CustomState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.theta1);
      stream.next(m.theta1_dot);
      stream.next(m.theta2);
      stream.next(m.theta2_dot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test::CustomState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test::CustomState_<ContainerAllocator>& v)
  {
    s << indent << "theta1: ";
    Printer<double>::stream(s, indent + "  ", v.theta1);
    s << indent << "theta1_dot: ";
    Printer<double>::stream(s, indent + "  ", v.theta1_dot);
    s << indent << "theta2: ";
    Printer<double>::stream(s, indent + "  ", v.theta2);
    s << indent << "theta2_dot: ";
    Printer<double>::stream(s, indent + "  ", v.theta2_dot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_MESSAGE_CUSTOMSTATE_H
